Order of Execution
1.FROM/JOIN
-Specifies the tables to retrieve data from and how to join them.
2.WHERE
-Filters rows based on conditions.
3.GROUP BY
-Group rows share a property so aggregate functions can be applied.
4.HAVING
-Filters groups based on aggregate conditions(used after GROUP BY).
5.SELECT
-Select specific columns to display in the final result.
6.DISTINCT 
-Removes duplicate rows from the result set(applied after SELECT)
7.ORDER BY 
-Sorts the result set based on specified columns/values.
8.LIMIT/OFFSET
-Limits the number of rows returned, often used for pagination.

Why this order?
This sequence ensures SQL queries are processed efficiently and logically.

Data soures and joins are defined first; filtering happens early to reduce the amount 
of data processed, grouping and aggregation follow, then specific fields are selected,
and finally, the output is ordered and limited.

This flow reflects the logical processing order necessary to construct the final dataset
and optimization principles database use to execute queries efficiently.

